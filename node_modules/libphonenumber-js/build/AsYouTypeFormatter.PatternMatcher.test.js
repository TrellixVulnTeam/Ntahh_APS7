"use strict";

var _AsYouTypeFormatterPatternMatcher = _interopRequireDefault(require("./AsYouTypeFormatter.PatternMatcher.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

describe('AsYouTypeFormatter.PatternMatcher', function () {
  it('should throw when no pattern is passed', function () {
    expect(function () {
      return new _AsYouTypeFormatterPatternMatcher["default"]();
    }).to["throw"]('Pattern is required');
  });
  it('should throw when no string is passed', function () {
    var matcher = new _AsYouTypeFormatterPatternMatcher["default"]('1');
    expect(function () {
      return matcher.match();
    }).to["throw"]('String is required');
  });
  it('should throw on illegal characters', function () {
    expect(function () {
      return new _AsYouTypeFormatterPatternMatcher["default"]('4(5|6)7');
    }).to["throw"]('Illegal characters');
  });
  it('should throw on an illegal ] operator', function () {
    expect(function () {
      return new _AsYouTypeFormatterPatternMatcher["default"]('4]7');
    }).to["throw"]('"]" operator must be preceded by "[" operator');
  });
  it('should throw on an illegal - operator in a one-of set', function () {
    expect(function () {
      return new _AsYouTypeFormatterPatternMatcher["default"]('[-5]');
    }).to["throw"]('Couldn\'t parse a one-of set pattern: -5');
  });
  it('should throw on a